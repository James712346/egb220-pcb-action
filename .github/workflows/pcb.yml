name: PCB Gerber Generation
on:
  push:
    branches:
      - main
env:
  price-per-square-inch: 2.5
jobs:
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      librepcb: ${{ steps.list_librepcb_projects.outputs.librepcb }}
      kicad: ${{ steps.list_kicad_projects.outputs.kicad }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List project files for LibrePCB
        id: list_librepcb_projects
        run: |
          librepcb=$(find schematics -mindepth 1 -maxdepth 2 -name '*.lpp' -type f | sed 's|^\./||' | jq -R -s -c 'split("\n")[:-1]')
          echo $librepcb
          if [ "$librepcb" = "[]" ]; then
            echo "No LibrePCB projects found."
            librepcb=$(jq -n '["None"]')
            librepcb=$(jq -r tostring <<< "$librepcb")
            echo "librepcb=$librepcb" >> $GITHUB_OUTPUT
          else
            echo "librepcb=$librepcb" >> $GITHUB_OUTPUT
          fi
      - name: List project files for KiCad
        id: list_kicad_projects
        run: |
          kicad=$(find schematics -mindepth 1 -maxdepth 2 -name '*.kicad_pro' -type f | sed 's|^\./||' | jq -R -s -c 'split("\n")[:-1]')
          echo $kicad
          if [ "$kicad" = "[]" ]; then
            echo "No KiCad projects found."
            kicad=$(jq -n '["None"]')
            kicad=$(jq -r tostring <<< "$kicad")
            echo "kicad=$kicad" >> $GITHUB_OUTPUT
          else
            echo "kicad=$kicad" >> $GITHUB_OUTPUT
          fi
        
  generate_librePCB_gerber_files:
    needs: setup_matrix
    runs-on: ubuntu-latest
    container:
      image: librepcb/librepcb-cli:1.1.0
      options: --entrypoint /bin/bash
    strategy:
      matrix:
        file: ${{fromJson(needs.setup_matrix.outputs.librepcb)}}
    steps:
      - name: Checkout code
        if: matrix.file != 'None'
        uses: actions/checkout@v4
      - name: Setup gerber Config
        if: matrix.file != 'None'
        run: |
          echo "Setting up Gerber Config"
          cat <<EOF > /tmp/gerber-config.lp
          (job 7f79595f-d2db-4b76-9d48-8a69f045949b (name "Gerber/Excellon")
            (type gerber_excellon)
            (outlines (suffix ".gm1"))
            (copper_top (suffix ".gtl"))
            (copper_inner (suffix ".g{{CU_LAYER}}"))
            (copper_bot (suffix ".gbl"))
            (soldermask_top (suffix ".gts"))
            (soldermask_bot (suffix ".gbs"))
            (silkscreen_top (suffix ".gto"))
            (silkscreen_bot (suffix ".gbo"))
            (solderpaste_top (create true) (suffix ".gtp"))
            (solderpaste_bot (create true) (suffix ".gbp"))
            (drills (merge true)
            (suffix_pth "_PTH.drl")
            (suffix_npth "_NPTH.drl")
            (suffix_merged ".drl")
            (suffix_buried "_L{{START_NUMBER}}-L{{END_NUMBER}}.drl")
            (g85_slots false)
            )
            (board default)
            (base_path "/tmp/gerber/{{BOARD}}")
          )
          EOF

      - name: Generate Gerber files for LibrePCB
        if: matrix.file != 'None'
        run: |
          echo "Generating Gerber files for $file (LibrePCB)"
          librepcb-cli open-project $file --export-pcb-fabrication-data --pcb-fabrication-settings /tmp/gerber-config.lp
        env:
          file: ${{ matrix.file }}
      - name: Format Name
        if: matrix.file != 'None'
        id: matrix_name
        run: |
          x=${file%.lpp}
          echo "name=${x##*/}" >> $GITHUB_OUTPUT
        env:
          file: ${{ matrix.file }}
      - name: Add Artifacts
        if: matrix.file != 'None'
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.matrix_name.outputs.name}}
          path: /tmp/gerber
          retention-days: 1
        env:
          file: ${{ matrix.file }}
    
  librePCB_checks:
    needs: setup_matrix
    runs-on: ubuntu-latest
    container:
      image: librepcb/librepcb-cli:1.1.0
      options: --entrypoint /bin/bash
    strategy:
      matrix:
        file: ${{fromJson(needs.setup_matrix.outputs.librepcb)}}
    steps:
      - name: Checkout code
        if: matrix.file != 'None'
        uses: actions/checkout@v4
      - name: Check for DRC Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for DRC errors in $file"
          librepcb-cli open-project $file --drc
        env:
          file: ${{ matrix.file }}
      - name: Check for ERC Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for ERC errors in $file"
          librepcb-cli open-project $file --erc
        env:
          file: ${{ matrix.file }}
      - name: Check for Netlist Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for Netlist errors in $file"
          librepcb-cli open-project $file --check-netlist
        env:
          file: ${{ matrix.file }}
      - name: Check for Footprint Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for Footprint errors in $file"
          librepcb-cli open-project $file --check-footprints
        env:
          file: ${{ matrix.file }}
      - name: Check for Symbol Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for Symbol errors in $file"
          librepcb-cli open-project $file --check-symbols
        env:
          file: ${{ matrix.file }}
      - name: Check for Component Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for Component errors in $file"
          librepcb-cli open-project $file --check-components
        env:
          file: ${{ matrix.file }}
      - name: Check for Project Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for Project errors in $file"
          librepcb-cli open-project $file --check-project
        env:
          file: ${{ matrix.file }}
    

  generates_kidcad_gerber_files:
    needs: setup_matrix
    runs-on: ubuntu-latest
    container:
      image: kicad/kicad:8.0
      options: --entrypoint /bin/bash --user root
    strategy:
      matrix:
        file: ${{fromJson(needs.setup_matrix.outputs.kicad)}}
    steps:
      - name: Checkout code
        if: matrix.file != 'None'
        uses: actions/checkout@v4

      - name: Setup KiCad
        if: matrix.file != 'None'
        run: |
          echo "Setting up KiCad for $folder "
          echo "Files: $files"
        env:
          file: ${{ matrix.file }}

      - name: Generate Gerber files for KiCad
        if: matrix.file != 'None'
        run: |
          echo "Generating Gerber files for $file (KiCad)"
          # Run commands to generate Gerber files for KiCad
        env:
          file: ${{ matrix.file }}

  gerber_size_check:
    needs: [generate_librePCB_gerber_files, generates_kidcad_gerber_files]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      sizing: ${{ steps.cal_size.outputs.sizing }}
    steps:
      - name: Downloads All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/gerber
      - name: Install Gerbv and ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y gerbv imagemagick
      - name: Generate PNGs of Profile
        run: |
          mkdir -p /tmp/images/
          for gerber in /tmp/gerber/*/*.gm1; do
            project=${gerber%/*}
            project=${project##*/}
            filename=${gerber##*/}
            filename=${filename%.gm1}
            echo "Generating PNG for $project-$filename"
            mkdir -p /tmp/images/$project
            gerbv -x png -o /tmp/images/$project/$filename.png $gerber -D 1000 -B 0
          done
      - name: Evaluate Gerber Size 
        id: cal_size
        run: |
          json=$(jq -n '{}')
          for image in /tmp/images/*/*.png; do
            project=${image%/*}
            project=${project##*/}
            filename=${image##*/}
            filename=${filename%.png}
            width=$(identify -format '%w' "$image")
            height=$(identify -format '%h' "$image")
            width_inch=$(bc <<< "scale=2; $width/1000")
            height_inch=$(bc <<< "scale=2; $height/1000")
            width_mm=$(bc <<< "scale=2; $width_inch*25.4")
            height_mm=$(bc <<< "scale=2; $height_inch*25.4")
            square_inches=$(bc <<< "scale=2; $width_inch*$height_inch")
            square_mm=$(bc <<< "scale=2; $width_mm*$height_mm")

            price=$(bc <<< "scale=2; $square_inches*${{ env.price-per-square-inch }}")
            
            json=$(jq --arg key "$project-$filename" --argjson value "{\"width_px\": $width, \"height_px\": $height, \"width_inch\": $width_inch, \"height_inch\": $height_inch, \"width_mm\": $width_mm, \"height_mm\": $height_mm, \"area_inch\": $square_inches, \"area_mm\": $square_mm, \"price\": $price}" '. + {($key): $value}' <<< "$json")

            echo "Image: $image"
            echo "Width: $width px ($width_inch inch, $width_mm mm)"
            echo "Height: $height px ($height_inch inch, $height_mm mm)"
            echo "Area: $square_inches inch² ($square_mm mm²)"
            echo "Price: $price"
          done
          json_string=$(jq -r tostring <<< "$json")
          echo "sizing=$json_string" >> $GITHUB_OUTPUT
        env:
          price_per_square_inch: ${{ env.price-per-square-inch }}

  gerber_silk_check:
    needs: [generate_librePCB_gerber_files, generates_kidcad_gerber_files]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      silk_images: ${{ steps.get_imgur_urls.outputs.silk_images }}
      extracted_text: ${{ steps.extract_text.outputs.extracted_text }}
    env:
      TESSDATA_PREFIX: /usr/share/tessdata 
      imgursecret: ${{ secrets.IMGUR_CLIENT_ID }}
    steps:
      - name: Downloads All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/gerber
      - name: Install Gerbv
        run: |
          sudo apt-get update
          sudo apt-get install -y gerbv
      - name: Generate PNGs of Silk Screen
        run: |
          mkdir -p /tmp/images/
          for gerber in /tmp/gerber/*/*.gto; do
            project=${gerber%/*}
            project=${project##*/}
            filename=${gerber##*/}
            filename=${filename%.gto}
            echo "Generating PNG for $project-$filename"
            mkdir -p /tmp/images/$project
            gerbv -x png -o /tmp/images/$project/$filename.png $gerber -D 1000
          done
      - name: Install Tesseract OCR
        run: |
          sudo apt-get install -y tesseract-ocr
          wget https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata
          mkdir -p /usr/share/tessdata
          sudo mv eng.traineddata /usr/share/tessdata
      - name: Publish silkscreens on imgur
        id: imgur_step
        uses: devicons/public-upload-to-imgur@v2.2.2
        if: ${{ env.imgursecret != ''}}
        with:
          client_id: ${{ env.imgursecret }}
          path: /tmp/images/*/*.png
      - name: Set Silk Screen URLs as output
        id: get_imgur_urls
        if: ${{ env.imgursecret != ''}}
        run: |
          json=$(jq -n '{}')
          json=$(jq -n '{}') # Create an empty JSON object
          IFS=', ' read -r -a urls <<< "$IMGUR_URLS"
          images=($(find /tmp/images -type f -name "*.png" | sort -n))
          for index in "${!urls[@]}"; do
            url=${urls[index]}
            url=$(echo $url | tr -d '"[]')
            image=${images[index]}
            project=${image%/*}
            project=${project##*/}
            filename=${image##*/}
            filename=${filename%.png}
            # Add project-filename: url to the JSON object
            json=$(jq --arg key "$project-$filename" --arg url "$url" '. + {($key): $url}' <<< "$json")
          done
          json_string=$(jq -r tostring <<< "$json")
          echo "silk_images=$json_string" >> $GITHUB_OUTPUT
        env:
          IMGUR_URLS: ${{ steps.imgur_step.outputs.imgur_urls }}
      - name: No imgur secret
        if: ${{ env.imgursecret == ''}}
        run: |
          json=$(jq -n '{}')
          json_string=$(jq -r tostring <<< "$json")
          echo "silk_images=$json_string" >> $GITHUB_OUTPUTs
          echo "No imgur secret provided, skipping imgur upload"
      - name: Extract Text from Silk Screen
        id: extract_text
        run: |
          json=$(jq -n '{}')
          for image in /tmp/images/*/*.png; do
            project=${image%/*}
            project=${project##*/}
            filename=${image##*/}
            filename=${filename%.png}
            echo "Extracting text from $project-$filename"
            tesseract $image /tmp/images/$project/$filename --dpi 1000 --psm 11 --oem 0
            text=$(cat /tmp/images/$project/$filename.txt) | tr '\n\f' ' '
            json=$(jq --arg key "$project-$filename" --arg text "$text" '. + {($key): $text}' <<< "$json")
          done
          echo $json
          json_string=$(jq -r tostring <<< "$json")
          echo "extracted_text=$json_string" >> $GITHUB_OUTPUT
  publish_release:
    needs: [gerber_size_check, gerber_silk_check]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Get all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/gerber
      - name: Zip Gerber Files
        run: |
          cd /tmp/gerber
          for dir in *; do
            zip -r $dir.zip $dir
          done
      - name: Generate Readme for Release
        env:
          sizing: ${{ needs.gerber_size_check.outputs.sizing }}
          silkscreen_urls: ${{ needs.gerber_silk_check.outputs.silk_images }}
          extracted_text: ${{ needs.gerber_silk_check.outputs.extracted_text }}
        run: |
          sizing=$(echo "$sizing" | jq -r '.')
          silkscreen_urls=$(echo "$silkscreen_urls" | jq -r '.')
          extracted_text=$(echo "$extracted_text" | jq -r '.')
          echo "$extracted_text"
          keys=$(jq -r 'keys[]' <<< $sizing)

          echo "# Gerber Files" > /tmp/README.md
          for key in $keys; do
            project=${key%-*}
            filename=${key##*-}
            touch /tmp/README.md
            echo "## Project: $project, Board: $filename" >> /tmp/README.md
            echo "### Size" >> /tmp/README.md
            echo "| Attribute | Value | Unit |" >> /tmp/README.md
            echo "|-----------|:-----:|-----:|" >> /tmp/README.md
            echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_px') | px |" >> /tmp/README.md
            echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_px') | px |" >> /tmp/README.md
            echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_inch') | inch |" >> /tmp/README.md
            echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_inch') | inch |" >> /tmp/README.md
            echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_mm') | mm |" >> /tmp/README.md
            echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_mm') | mm |" >> /tmp/README.md
            echo "| Area | $(echo "$sizing" | jq -r '.["'"$key"'"].area_inch') | inch² |" >> /tmp/README.md
            echo "| Area | $(echo "$sizing" | jq -r '.["'"$key"'"].area_mm') | mm² |" >> /tmp/README.md
            echo "| Price | \$$(echo "$sizing" | jq -r '.["'"$key"'"].price') | AUD |" >> /tmp/README.md
            echo "### Silk Screen" >> /tmp/README.md
            echo "![Silk Screen]($(echo "$silkscreen_urls" | jq -r '.["'"$key"'"]'))" >> /tmp/README.md
            echo "#### Extracted Text" >> /tmp/README.md
            echo "\`\`\`" >> /tmp/README.md
            echo "$extracted_text" | jq -r '.["'"$key"'"]' >> /tmp/README.md
            echo "\`\`\`" >> /tmp/README.md
          done
          cat /tmp/README.md

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          files: /tmp/gerber/*
          tag_name: ${{ github.sha }}
          name: Gerber Files for ${{ github.sha }}
          body_path: /tmp/README.md
          draft: true
