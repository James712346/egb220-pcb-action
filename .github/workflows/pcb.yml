name: PCB Gerber Generation
on:
    push:
        branches:
            - main
        paths:
            - 'schematics/**'
            - '.github/workflows/pcb.yml'
    pull_request:
        paths:
            - 'schematics/**'
            - '.github/workflows/pcb.yml'
            
env:
  group_name: C8
  project_base_path: schematics
  max-width-mm: 100
  max-height-mm: 100
  price-per-square-inch: 2.5
jobs:
  setup_matrix:
    name: Setup Matrix
    runs-on: ubuntu-latest
    outputs:
      librepcb: ${{ steps.list_librepcb_projects.outputs.librepcb }}
      kicad: ${{ steps.list_kicad_projects.outputs.kicad }}
      projects: ${{ steps.list_projects.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List project files for LibrePCB
        id: list_librepcb_projects
        run: |
          librepcb=$(find $project_base_path -mindepth 1 -maxdepth 2 -name '*.lpp' -type f | sed 's|^\./||' | jq -R -s -c 'split("\n")[:-1]')
          echo $librepcb
          if [ "$librepcb" = "[]" ]; then
            echo "No LibrePCB projects found."
            librepcb=$(jq -n '["None"]')
            librepcb=$(jq -r tostring <<< "$librepcb")
            echo "librepcb=$librepcb" >> $GITHUB_OUTPUT
          else
            echo "librepcb=$librepcb" >> $GITHUB_OUTPUT
          fi
      - name: List project files for KiCad
        id: list_kicad_projects
        run: |
          kicad=$(find $project_base_path -mindepth 1 -maxdepth 2 -name '*.kicad_pcb' -type f | sed 's|^\./||' | jq -R -s -c 'split("\n")[:-1]')
          echo $kicad
          if [ "$kicad" = "[]" ]; then
            echo "No KiCad projects found."
            kicad=$(jq -n '["None"]')
            kicad=$(jq -r tostring <<< "$kicad")
            echo "kicad=$kicad" >> $GITHUB_OUTPUT
          else
            echo "kicad=$kicad" >> $GITHUB_OUTPUT
          fi
      - name: List LibrePCB and KiCAD Joiner
        id: list_projects
        env:
          librepcb: ${{ steps.list_librepcb_projects.outputs.librepcb }}
          kicad: ${{ steps.list_kicad_projects.outputs.kicad }}
        run: echo "projects=$(jq -r tostring <<< $(jq -n --argjson librepcb "$librepcb" --argjson kicad "$kicad" '$librepcb + $kicad'))" >> $GITHUB_OUTPUT

        
  generate_librePCB_gerber_files:
    name: Generate Gerber Files for LibrePCB
    needs: setup_matrix
    runs-on: ubuntu-latest
    container:
      image: librepcb/librepcb-cli:1.1.0
      options: --entrypoint /bin/bash
    strategy:
      matrix:
        file: ${{fromJson(needs.setup_matrix.outputs.librepcb)}}
    steps:
      - name: Checkout code
        if: matrix.file != 'None'
        uses: actions/checkout@v4
      - name: Setup gerber Config
        if: matrix.file != 'None'
        run: |
          echo "Setting up Gerber Config"
          cat <<EOF > /tmp/gerber-config.lp
          (job 7f79595f-d2db-4b76-9d48-8a69f045949b (name "Gerber/Excellon")
            (type gerber_excellon)
            (outlines (suffix ".gm1"))
            (copper_top (suffix ".gtl"))
            (copper_inner (suffix ".g{{CU_LAYER}}"))
            (copper_bot (suffix ".gbl"))
            (soldermask_top (suffix ".gts"))
            (soldermask_bot (suffix ".gbs"))
            (silkscreen_top (suffix ".gto"))
            (silkscreen_bot (suffix ".gbo"))
            (solderpaste_top (create true) (suffix ".gtp"))
            (solderpaste_bot (create true) (suffix ".gbp"))
            (drills (merge true)
            (suffix_pth "_PTH.drl")
            (suffix_npth "_NPTH.drl")
            (suffix_merged ".drl")
            (suffix_buried "_L{{START_NUMBER}}-L{{END_NUMBER}}.drl")
            (g85_slots false)
            )
            (board default)
            (base_path "/tmp/gerber/{{BOARD}}")
          )
          EOF

      - name: Generate Gerber files for LibrePCB
        if: matrix.file != 'None'
        run: |
          echo "Generating Gerber files for $file (LibrePCB)"
          librepcb-cli open-project $file --export-pcb-fabrication-data --pcb-fabrication-settings /tmp/gerber-config.lp
        env:
          file: ${{ matrix.file }}
      - name: Format Name
        if: matrix.file != 'None'
        id: matrix_name
        run: |
          x=${file%.lpp}
          echo "name=${x##*/}" >> $GITHUB_OUTPUT
        env:
          file: ${{ matrix.file }}
      - name: Add Artifacts
        if: matrix.file != 'None'
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.matrix_name.outputs.name}}
          path: /tmp/gerber
          retention-days: 1
        env:
          file: ${{ matrix.file }}
    
  librePCB_checks:
    name: Check for LibrePCB
    needs: setup_matrix
    runs-on: ubuntu-latest
    container:
      image: librepcb/librepcb-cli:1.1.0
      options: --entrypoint /bin/bash
    strategy:
      matrix:
        file: ${{fromJson(needs.setup_matrix.outputs.librepcb)}}
    steps:
      - name: Checkout code
        if: matrix.file != 'None'
        uses: actions/checkout@v4
      - name: Check for DRC Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for DRC errors in $file"
          librepcb-cli open-project $file --drc
        env:
          file: ${{ matrix.file }}
        continue-on-error: true
      - name: Check for ERC Errors
        if: matrix.file != 'None'
        run: |
          echo "Checking for ERC errors in $file"
          librepcb-cli open-project $file --erc
        env:
          file: ${{ matrix.file }}
        continue-on-error: true
        
    

  generates_kidcad_gerber_files:
    name: Generate Gerber Files for KiCad
    needs: setup_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{fromJson(needs.setup_matrix.outputs.kicad)}}
    steps:
      - name: Checkout code
        if: matrix.file != 'None'
        uses: actions/checkout@v4

      - name: Setup KiCad
        if: matrix.file != 'None'
        run: |
          echo "Setting up KiCad for $folder "
          echo "Files: $files"
        env:
          file: ${{ matrix.file }}
      - name: Create KiBot Config
        if: matrix.file != 'None'
        run: |
          project=${file%/*}
          project=${project##*/}
          echo "Setting up KiBot Config"
          cat <<EOF > /tmp/kibot-config.yaml
          kibot:
            version: 1
          outputs:
            - name: PCBWay_gerbers
              comment: Gerbers compatible with PCBWay
              type: gerber
              dir: /tmp/gerber/$project
              options: &gerber_options
                exclude_edge_layer: true
                exclude_pads_from_silkscreen: true
                plot_sheet_reference: false
                plot_footprint_refs: true
                plot_footprint_values: true
                force_plot_invisible_refs_vals: false
                tent_vias: true
                use_protel_extensions: true
                create_gerber_job_file: false
                output: "%f.%x"
                gerber_precision: 4.6
                use_gerber_x2_attributes: false
                use_gerber_net_attributes: false
                disable_aperture_macros: true
                line_width: 0.1
                subtract_mask_from_silk: false
                inner_extension_pattern: '.gl%N'
              layers:
                - copper
                - F.SilkS
                - B.SilkS
                - F.Mask
                - B.Mask
                - F.Paste
                - B.Paste
                - Edge.Cuts
          
            - name: PCBWay_drill
              comment: Drill files compatible with PCBWay
              type: excellon
              dir: /tmp/gerber/$project
              options:
                metric_units: false
                minimal_header: true
                zeros_format: SUPPRESS_LEADING
                left_digits: 3
                right_digits: 3
                pth_and_npth_single_file: false
                pth_id: ''
                npth_id: '-NPTH'
                output: "%f%i.drl"
          EOF
      - name: Generate Gerber files for KiCad
        uses: INTI-CMNB/KiBot@v2_k8
        if: matrix.file != 'None'
        with:
          config: /tmp/kibot-config.yaml
          board: ${{ matrix.file }}
      - name: Format Name
        if: matrix.file != 'None'
        id: matrix_name
        run: |
          x=${file%.lpp}
          echo "name=${x##*/}" >> $GITHUB_OUTPUT
        env:
          file: ${{ matrix.file }}
      - name: Add Artifacts
        if: matrix.file != 'None'
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.matrix_name.outputs.name}}
          path: /tmp/gerber
          retention-days: 1
        env:
          file: ${{ matrix.file }}


  gerber_size_generation:
    name: Generate Gerber Size Information
    needs: [generate_librePCB_gerber_files, generates_kidcad_gerber_files]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      sizing: ${{ steps.cal_size.outputs.sizing }}
    steps:
      - name: Downloads All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/gerber
      - name: Install Gerbv and ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y gerbv imagemagick
      - name: Generate PNGs of Profile
        run: |
          mkdir -p /tmp/images/
          for gerber in /tmp/gerber/*/*.gm1; do
            project=${gerber%/*}
            project=${project##*/}
            filename=${gerber##*/}
            filename=${filename%.gm1}
            echo "Generating PNG for $project-$filename"
            mkdir -p /tmp/images/$project
            gerbv -x png -o /tmp/images/$project/$filename.png $gerber -D 1000 -B 0
          done
      - name: Evaluate Gerber Size 
        id: cal_size
        run: |
          json=$(jq -n '{}')
          for image in /tmp/images/*/*.png; do
            project=${image%/*}
            project=${project##*/}
            filename=${image##*/}
            filename=${filename%.png}
            width=$(identify -format '%w' "$image")
            height=$(identify -format '%h' "$image")
            width_inch=$(bc <<< "scale=2; $width/1000")
            height_inch=$(bc <<< "scale=2; $height/1000")
            width_mm=$(bc <<< "scale=2; $width_inch*25.4")
            height_mm=$(bc <<< "scale=2; $height_inch*25.4")
            square_inches=$(bc <<< "scale=2; $width_inch*$height_inch")
            square_mm=$(bc <<< "scale=2; $width_mm*$height_mm")

            price=$(bc <<< "scale=2; $square_inches*${{ env.price-per-square-inch }}")
            
            json=$(jq --arg key "$project-$filename" --argjson value "{\"width_px\": $width, \"height_px\": $height, \"width_inch\": $width_inch, \"height_inch\": $height_inch, \"width_mm\": $width_mm, \"height_mm\": $height_mm, \"area_inch\": $square_inches, \"area_mm\": $square_mm, \"price\": $price}" '. + {($key): $value}' <<< "$json")

            echo "Image: $image"
            echo "Width: $width px ($width_inch inch, $width_mm mm)"
            echo "Height: $height px ($height_inch inch, $height_mm mm)"
            echo "Area: $square_inches inch² ($square_mm mm²)"
            echo "Price: $price"
          done
          json_string=$(jq -r tostring <<< "$json")
          echo "sizing=$json_string" >> $GITHUB_OUTPUT
        env:
          price_per_square_inch: ${{ env.price-per-square-inch }}

  gerber_silkscreen_generation:
    name: Generate Gerber Silkscreen PNG and Extract Text
    needs: [generate_librePCB_gerber_files, generates_kidcad_gerber_files]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      silk_images: ${{ steps.get_imgur_urls.outputs.silk_images }}
      extracted_text: ${{ steps.extract_text.outputs.extracted_text }}
    env:
      TESSDATA_PREFIX: /usr/share/tessdata 
      imgursecret: ${{ secrets.IMGUR_CLIENT_ID }}
    steps:
      - name: Downloads All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/gerber
      - name: Install Gerbv
        run: |
          sudo apt-get update
          sudo apt-get install -y gerbv
      - name: Generate PNGs of Silk Screen
        run: |
          mkdir -p /tmp/images/
          for gerber in /tmp/gerber/*/*.gto; do
            project=${gerber%/*}
            project=${project##*/}
            filename=${gerber##*/}
            filename=${filename%.gto}
            echo "Generating PNG for $project-$filename"
            mkdir -p /tmp/images/$project
            gerbv -x png -o /tmp/images/$project/$filename-top.png $gerber -D 1000
          done
          for gerber in /tmp/gerber/*/*.gbo; do
            project=${gerber%/*}
            project=${project##*/}
            filename=${gerber##*/}
            filename=${filename%.gbo}
            echo "Generating PNG for $project-$filename"
            mkdir -p /tmp/images/$project
            gerbv -x png -o /tmp/images/$project/$filename-bottom.png $gerber -D 1000 --mirror=Y
          done
      - name: Install Tesseract OCR
        run: |
          sudo apt-get install -y tesseract-ocr
          wget https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata
          mkdir -p /usr/share/tessdata
          sudo mv eng.traineddata /usr/share/tessdata
      - name: Publish silkscreens on imgur
        id: imgur_step
        uses: devicons/public-upload-to-imgur@v2.2.2
        if: ${{ env.imgursecret != ''}}
        with:
          client_id: ${{ env.imgursecret }}
          path: /tmp/images/*/*.png
      - name: Set Silk Screen URLs as output
        id: get_imgur_urls
        if: ${{ env.imgursecret != ''}}
        run: |
          json=$(jq -n '{}') # Create an empty JSON object
          IFS=', ' read -r -a urls <<< "$IMGUR_URLS"
          images=($(find /tmp/images -type f -name "*.png" | sort -n))
          for index in "${!urls[@]}"; do
            url=${urls[index]}
            url=$(echo $url | tr -d '"[]')
            image=${images[index]}
            project=${image%/*}
            project=${project##*/}
            filename=${image##*/}
            filename=${filename%.png}
            # Add project-filename: url to the JSON object
            json=$(jq --arg key "$project-$filename" --arg url "$url" '. + {($key): $url}' <<< "$json")
          done
          json_string=$(jq -r tostring <<< "$json")
          echo "silk_images=$json_string" >> $GITHUB_OUTPUT
        env:
          IMGUR_URLS: ${{ steps.imgur_step.outputs.imgur_urls }}
      - name: No imgur secret
        if: ${{ env.imgursecret == ''}}
        run: |
          json=$(jq -n '{}')
          json_string=$(jq -r tostring <<< "$json")
          echo "silk_images=$json_string" >> $GITHUB_OUTPUTs
          echo "No imgur secret provided, skipping imgur upload"
      - name: Extract Text from Silk Screen
        id: extract_text
        run: |
          json=$(jq -n '{}')
          for image in /tmp/images/*/*.png; do
            project=${image%/*}
            project=${project##*/}
            filename=${image##*/}
            filename=${filename%.png}
            echo "Extracting text from $project-$filename"
            tesseract $image /tmp/images/$project/$filename --dpi 1000 --psm 11 --oem 0
            text=$(cat /tmp/images/$project/$filename.txt)
            json=$(jq --arg key "$project-$filename" --arg text "$text" '. + {($key): $text}' <<< "$json")
          done
          echo $json
          json_string=$(jq -r tostring <<< "$json")
          echo "extracted_text=$json_string" >> $GITHUB_OUTPUT
  gerber_silkscreen_check:
    name: Gerber Silkscreen Check for EGB220
    needs: [setup_matrix, gerber_silkscreen_generation]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        projects: ${{fromJson(needs.setup_matrix.outputs.projects)}}
    env:
      extracted_text: ${{ needs.gerber_silkscreen_generation.outputs.extracted_text }}
    steps:
      - name: Format Project
        id: fproject
        if: matrix.projects != 'None'
        run: |
          x=${project%.lpp}
          echo "project=${x##*/}" >> $GITHUB_OUTPUT
        env:
          project: ${{ matrix.projects }}
      - name: Get Boards for project
        id: boards
        if: matrix.projects != 'None'
        run: |
          boards=$(jq -n '[]')
          keys=$(jq -r 'keys[]' <<< $extracted_text)
          for key in $keys; do 
            if [[ $key == $project-*-top ]]; then 
              key=${key%-*}; 
              boards=$(jq -n --arg key ${key##*-} --argjson boards "$boards" '$boards + [$key]'); 
            fi; 
          done
          boards=$(jq -r tostring <<< "$boards")
          echo "boards=$boards" >> $GITHUB_OUTPUT
        env:
          project: ${{ steps.fproject.outputs.project }}
      - name: Check Boards have Team on either Top or Bottom
        env:
          project: ${{ steps.fproject.outputs.project }}
          boards: ${{ steps.boards.outputs.boards }}
        if: matrix.projects != 'None'
        run: |
          failed=false
          boards=$(echo $boards | jq -c '.[]' | tr -d '"')
          for board in $boards; do
            top=$(jq -r '.["'"$project-$board-top"'"]' <<< $extracted_text)
            bottom=$(jq -r '.["'"$project-$board-bottom"'"]' <<< $extracted_text) 
            top=$(echo $top | perl -ne 'print if /team/i')
            bottom=$(echo $bottom | perl -ne 'print if /team/i')
            if [[ -n $top ]] || [[ -n $bottom ]]; then
              echo "Board $board has team on either top or bottom"
            else
              echo "Board $board does not have team on either top or bottom"
              failed=true
            fi
            if [[ $failed == true ]]; then
              exit 1
            fi
          done
  gerber_size_check:
    name: Gerber Size Check for EGB220
    needs: [setup_matrix, gerber_size_generation]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        projects: ${{fromJson(needs.setup_matrix.outputs.projects)}}
    env:
      sizing: ${{ needs.gerber_size_generation.outputs.sizing }}
    steps:
      - name: Format Project
        id: fproject
        if: matrix.projects != 'None'
        run: |
          x=${project%.lpp}
          echo "project=${x##*/}" >> $GITHUB_OUTPUT
        env:
          project: ${{ matrix.projects }}
      - name: Get Boards for project
        if: matrix.projects != 'None'
        id: boards
        run: |
          extracted_text=$(echo "$extracted_text" | jq -r '.')
          boards=$(jq -n '[]')
          keys=$(jq -r 'keys[]' <<< $sizing)
          for key in $keys; do 
            if [[ $key == $project-* ]]; then 
              boards=$(jq -n --arg key ${key##*-} --argjson boards "$boards" '$boards + [$key]'); 
            fi; 
          done
          boards=$(jq -r tostring <<< "$boards")
          echo "boards=$boards" >> $GITHUB_OUTPUT
        env:
          project: ${{ steps.fproject.outputs.project }}
      - name: Check Boards are within size limits
        if: matrix.projects != 'None'
        env:
          project: ${{ steps.fproject.outputs.project }}
          boards: ${{ steps.boards.outputs.boards }}
          max_width_mm: ${{ env.max-width-mm }}
          max_height_mm: ${{ env.max-height-mm }}
        run: |
          failed=false
          boards=$(echo $boards | jq -c '.[]' | tr -d '"')
          for board in $boards; do
            width=$(jq -r '.["'"$project-$board"'"].width_mm' <<< $sizing)
            height=$(jq -r '.["'"$project-$board"'"].height_mm' <<< $sizing)
            if (( $(echo "$width > $max_width_mm" | bc -l) )) || (( $(echo "$height > $max_height_mm" | bc -l) )); then
              echo "Board $board is too large"
              exit 1
            else
              echo "Board $board is within size limits"
            fi
          done
          if [[ $failed == true ]]; then
              exit 1
          fi

  publish_release:
    needs: [gerber_size_generation, gerber_silkscreen_generation]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    env:
      sizing: ${{ needs.gerber_size_generation.outputs.sizing }}
      silkscreen_urls: ${{ needs.gerber_silkscreen_generation.outputs.silk_images }}
      extracted_text: ${{ needs.gerber_silkscreen_generation.outputs.extracted_text }}
    steps:
      - name: Get all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/gerber

      - name: Make Packages
        run: |
          mkdir -p /tmp/packages
          for gerber in /tmp/gerber/*/*; do
            project=${gerber%/*}
            project=${project##*/}
            boardname=${gerber##*/}
            boardname=${boardname%.*}
            boardname=$(echo $boardname | tr '[:upper:]' '[:lower:]')
            if [ ! -d /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ') ]; then
              mkdir -p /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')
              key=$project-$boardname
              echo "# Project: $project, Board: $boardname" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "## Size" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Attribute | Value | Unit |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "|-----------|:-----:|-----:|" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_px') | px |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_px') | px |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_inch') | inch |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_inch') | inch |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_mm') | mm |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_mm') | mm |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Area | $(echo "$sizing" | jq -r '.["'"$key"'"].area_inch') | inch² |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Area | $(echo "$sizing" | jq -r '.["'"$key"'"].area_mm') | mm² |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "| Price | \$$(echo "$sizing" | jq -r '.["'"$key"'"].price') | AUD |" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "## Silk Screen" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "### Top Layer" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "![Silk Screen]($(echo "$silkscreen_urls" | jq -r '.["'"$key-top"'"]'))" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "#### Extracted Text" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "\`\`\`" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "$extracted_text" | jq -r '.["'"$key-top"'"]' >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "\`\`\`" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "### Bottom Layer" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "![Silk Screen]($(echo "$silkscreen_urls" | jq -r '.["'"$key-bottom"'"]'))" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "#### Extracted Text" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "\`\`\`" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "$extracted_text" | jq -r '.["'"$key-bottom"'"]' >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
              echo "\`\`\`" >> /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/README.md
            fi
            mv $gerber /tmp/packages/$(echo "$group_name _$project _$boardname" | tr -d ' ')/
          done
          
          
      - name: Zip Gerber Files
        run: |
          cd /tmp/packages
          for dir in *; do
            zip -r $dir.zip $dir
          done
      - name: Generate Readme for Release
        run: |
          sizing=$(echo "$sizing" | jq -r '.')
          silkscreen_urls=$(echo "$silkscreen_urls" | jq -r '.')
          extracted_text=$(echo "$extracted_text" | jq -r '.')
          echo "$extracted_text"
          keys=$(jq -r 'keys[]' <<< $sizing)
          touch /tmp/README.md
          
          echo "# Gerber Files" > /tmp/README.md
          for key in $keys; do
            project=${key%-*}
            filename=${key##*-}
            echo "## Project: $project, Board: $filename" >> /tmp/README.md
            echo "### Size" >> /tmp/README.md
            echo "| Attribute | Value | Unit |" >> /tmp/README.md
            echo "|-----------|:-----:|-----:|" >> /tmp/README.md
            echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_px') | px |" >> /tmp/README.md
            echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_px') | px |" >> /tmp/README.md
            echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_inch') | inch |" >> /tmp/README.md
            echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_inch') | inch |" >> /tmp/README.md
            echo "| Width | $(echo "$sizing" | jq -r '.["'"$key"'"].width_mm') | mm |" >> /tmp/README.md
            echo "| Height | $(echo "$sizing" | jq -r '.["'"$key"'"].height_mm') | mm |" >> /tmp/README.md
            echo "| Area | $(echo "$sizing" | jq -r '.["'"$key"'"].area_inch') | inch² |" >> /tmp/README.md
            echo "| Area | $(echo "$sizing" | jq -r '.["'"$key"'"].area_mm') | mm² |" >> /tmp/README.md
            echo "| Price | \$$(echo "$sizing" | jq -r '.["'"$key"'"].price') | AUD |" >> /tmp/README.md
            echo "### Silk Screen" >> /tmp/README.md
            echo "#### Top Layer" >> /tmp/README.md
            echo "![Silk Screen]($(echo "$silkscreen_urls" | jq -r '.["'"$key-top"'"]'))" >> /tmp/README.md
            echo "##### Extracted Text" >> /tmp/README.md
            echo "\`\`\`" >> /tmp/README.md
            echo "$extracted_text" | jq -r '.["'"$key-top"'"]' >> /tmp/README.md
            echo "\`\`\`" >> /tmp/README.md
            echo "#### Bottom Layer" >> /tmp/README.md
            echo "![Silk Screen]($(echo "$silkscreen_urls" | jq -r '.["'"$key-bottom"'"]'))" >> /tmp/README.md
            echo "##### Extracted Text" >> /tmp/README.md
            echo "\`\`\`" >> /tmp/README.md
            echo "$extracted_text" | jq -r '.["'"$key-bottom"'"]' >> /tmp/README.md
            echo "\`\`\`" >> /tmp/README.md
          done
          cat /tmp/README.md

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          files: /tmp/packages/*.zip
          tag_name: ${{ github.sha }}
          name: Gerber Files for ${{ github.sha }}
          body_path: /tmp/README.md
          draft: true
