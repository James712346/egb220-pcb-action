name: PCB Gerber Generation
on:
  push:
    branches:
      - main

jobs:
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      librepcb: ${{ steps.list_librepcb_projects.outputs.librepcb }}
      kicad: ${{ steps.list_kicad_projects.outputs.kicad }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List project files for LibrePCB
        id: list_librepcb_projects
        run: |
          export librepcb=$(find schematics -mindepth 1 -maxdepth 2 -name '*.lpp' -type f | sed 's|^\./||' | jq -R -s -c 'split("\n")[:-1]')
          echo $librepcb
          if [ -z "$librepcb" ]; then
            echo "librepcb=["None"]" >> $GITHUB_OUTPUT
          else
            echo "librepcb=$librepcb" >> $GITHUB_OUTPUT
          fi
      - name: List project files for KiCad
        id: list_kicad_projects
        run: |
          export kicad=$(find schematics -mindepth 1 -maxdepth 2 -name '*.kicad_pro' -type f | sed 's|^\./||' | jq -R -s -c 'split("\n")[:-1]')"
          if [ -z "$kicad" ]; then
            echo "kicad=["None"]" >> $GITHUB_OUTPUT
          else
            echo "kicad=$kicad" >> $GITHUB_OUTPUT
          fi
  generate_librePCB_gerber_files:
    needs: setup_matrix
    runs-on: ubuntu-latest
    if: ${{fromJson(needs.setup_matrix.outputs.librepcb)}} != ["None"]
    container:
      image: librepcb/librepcb-cli:1.1.0
      options: --entrypoint /bin/bash
    strategy:
      matrix:
        file: ${{fromJson(needs.setup_matrix.outputs.librepcb)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup gerber Config
        run: |
          echo "Setting up Gerber Config"
          cat <<EOF > /tmp/gerber-config.lp
          (job 7f79595f-d2db-4b76-9d48-8a69f045949b (name "Gerber/Excellon")
            (type gerber_excellon)
            (outlines (suffix ".gm1"))
            (copper_top (suffix ".gtl"))
            (copper_inner (suffix ".g{{CU_LAYER}}"))
            (copper_bot (suffix ".gbl"))
            (soldermask_top (suffix ".gts"))
            (soldermask_bot (suffix ".gbs"))
            (silkscreen_top (suffix ".gto"))
            (silkscreen_bot (suffix ".gbo"))
            (solderpaste_top (create true) (suffix ".gtp"))
            (solderpaste_bot (create true) (suffix ".gbp"))
            (drills (merge true)
            (suffix_pth "_PTH.drl")
            (suffix_npth "_NPTH.drl")
            (suffix_merged ".drl")
            (suffix_buried "_L{{START_NUMBER}}-L{{END_NUMBER}}.drl")
            (g85_slots false)
            )
            (board default)
            (base_path "/tmp/gerber/{{BOARD}}")
          )
          EOF

      - name: Generate Gerber files for LibrePCB
        run: |
          echo "Generating Gerber files for $file (LibrePCB)"
          librepcb-cli open-project $file --export-pcb-fabrication-data --pcb-fabrication-settings /tmp/gerber-config.lp
        env:
          file: ${{ matrix.file }}
      - name: Format Name
        id: matrix_name
        run: |
          export x=${file%.lpp}
          echo "name=${x##*/}" >> $GITHUB_OUTPUT
        env:
          file: ${{ matrix.file }}
      - name: Add Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.matrix_name.outputs.name}}
          path: /tmp/gerber
          retention-days: 1
        env:
          file: ${{ matrix.file }}
      # - name: Install Gerbv and ImageMagick
      #   run: |
      #     apt-get update
      #     apt-get install -y gerbv imagemagick
      # - name: LIST Gerber files
      #   run: |
      #       for gerber in $folder/output/*/gerber/*; do
      #         echo $gerber
      #       done
      # - name: Convert Profile to PNG
      #   run: |
      #     for gerber in $folder/output/*/gerber/*_OUTLINES.gbr; do
      #       echo $gerber
      #     done


  generates_kidcad_gerber_files:
    needs: setup_matrix
    runs-on: ubuntu-latest
    if: ${{fromJson(needs.setup_matrix.outputs.kicad)}} != ["None"]
    container:
      image: kicad/kicad:5.1.10
      options: --entrypoint /bin/bash
    strategy:
      matrix:
        file: ${{fromJson(needs.setup_matrix.outputs.kicad)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup KiCad
        run: |
          echo "Setting up KiCad for $folder"
        env:
          file: ${{ matrix.file }}

      - name: Generate Gerber files for KiCad
        run: |
          echo "Generating Gerber files for $file (KiCad)"
          # Run commands to generate Gerber files for KiCad
        env:
          file: ${{ matrix.file }}

  gerber_jobs:
    needs: [generate_librePCB_gerber_files, generates_kidcad_gerber_files]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Downloads All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/gerber
      - name: Install Gerbv and ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y gerbv imagemagick
      - name: Generate PNGs of Profile
        run: |
          mkdir -p /tmp/images/
          for gerber in /tmp/gerber/*/*.gm1; do
            filename=${gerber##*/}
            gerbv -x png -o /tmp/images/${filename%.gm1}.png $gerber -D 1000
          done
